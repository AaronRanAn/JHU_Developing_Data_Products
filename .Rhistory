library(shiny)
runExample("01_hello")
shiny::runApp('App-1')
shiny::runApp('App-2')
shiny::runApp('Tutorials & Trails/jhp_1')
shiny::runApp('Tutorials & Trails/jhp_2')
shiny::runApp('Tutorials & Trails/jhp_2')
shiny::runApp('Tutorials & Trails/jhp_2')
shiny::runApp('Tutorials & Trails/jhp_2')
runApp()
shiny::runApp('Tutorials & Trails/jhp_2')
shiny::runApp('Tutorials & Trails/jhp_2')
x <<- x + 1 # before shinyserver, get run once.
y <<-0
x <- o
x = 0
shiny::runApp('Tutorials & Trails/jhp_2')
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100) lines(c(mu, mu), c(0, 150),col="red",lwd=5) mse <- mean((galton$child - mu)^2) text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2))) }
install.packages("googleVis")
demo(googleVis)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(plot(1:x), x = slider(1, 100))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1)) # correct answer.
require(rChart)
install.packages("rChart")
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
data("airquality")
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE)
print(d)
